// pcie_avmm.v

// Generated using ACDS version 18.1 646

`timescale 1 ps / 1 ps
module pcie_avmm (
		input  wire        clk_clk,                      //           clk.clk
		output wire        coreclkout_clk,               //    coreclkout.clk
		input  wire        cra_chipselect,               //           cra.chipselect
		input  wire [13:0] cra_address,                  //              .address
		input  wire [3:0]  cra_byteenable,               //              .byteenable
		input  wire        cra_read,                     //              .read
		output wire [31:0] cra_readdata,                 //              .readdata
		input  wire        cra_write,                    //              .write
		input  wire [31:0] cra_writedata,                //              .writedata
		output wire        cra_waitrequest,              //              .waitrequest
		output wire        crairq_irq,                   //        crairq.irq
		input  wire [31:0] hip_ctrl_test_in,             //      hip_ctrl.test_in
		input  wire        hip_ctrl_simu_mode_pipe,      //              .simu_mode_pipe
		input  wire        hip_pipe_sim_pipe_pclk_in,    //      hip_pipe.sim_pipe_pclk_in
		output wire [1:0]  hip_pipe_sim_pipe_rate,       //              .sim_pipe_rate
		output wire [4:0]  hip_pipe_sim_ltssmstate,      //              .sim_ltssmstate
		output wire [2:0]  hip_pipe_eidleinfersel0,      //              .eidleinfersel0
		output wire [1:0]  hip_pipe_powerdown0,          //              .powerdown0
		output wire        hip_pipe_rxpolarity0,         //              .rxpolarity0
		output wire        hip_pipe_txcompl0,            //              .txcompl0
		output wire [7:0]  hip_pipe_txdata0,             //              .txdata0
		output wire        hip_pipe_txdatak0,            //              .txdatak0
		output wire        hip_pipe_txdetectrx0,         //              .txdetectrx0
		output wire        hip_pipe_txelecidle0,         //              .txelecidle0
		output wire        hip_pipe_txswing0,            //              .txswing0
		output wire [2:0]  hip_pipe_txmargin0,           //              .txmargin0
		output wire        hip_pipe_txdeemph0,           //              .txdeemph0
		input  wire        hip_pipe_phystatus0,          //              .phystatus0
		input  wire [7:0]  hip_pipe_rxdata0,             //              .rxdata0
		input  wire        hip_pipe_rxdatak0,            //              .rxdatak0
		input  wire        hip_pipe_rxelecidle0,         //              .rxelecidle0
		input  wire [2:0]  hip_pipe_rxstatus0,           //              .rxstatus0
		input  wire        hip_pipe_rxvalid0,            //              .rxvalid0
		input  wire        hip_serial_rx_in0,            //    hip_serial.rx_in0
		output wire        hip_serial_tx_out0,           //              .tx_out0
		output wire        hip_status_derr_cor_ext_rcv,  //    hip_status.derr_cor_ext_rcv
		output wire        hip_status_derr_cor_ext_rpl,  //              .derr_cor_ext_rpl
		output wire        hip_status_derr_rpl,          //              .derr_rpl
		output wire        hip_status_dlup_exit,         //              .dlup_exit
		output wire [4:0]  hip_status_ltssmstate,        //              .ltssmstate
		output wire        hip_status_ev128ns,           //              .ev128ns
		output wire        hip_status_ev1us,             //              .ev1us
		output wire        hip_status_hotrst_exit,       //              .hotrst_exit
		output wire [3:0]  hip_status_int_status,        //              .int_status
		output wire        hip_status_l2_exit,           //              .l2_exit
		output wire [3:0]  hip_status_lane_act,          //              .lane_act
		output wire [7:0]  hip_status_ko_cpl_spc_header, //              .ko_cpl_spc_header
		output wire [11:0] hip_status_ko_cpl_spc_data,   //              .ko_cpl_spc_data
		input  wire [15:0] irq_irq,                      //           irq.irq
		input  wire        irq_rcvr_clk_clk,             //  irq_rcvr_clk.clk
		input  wire        irq_rcvr_rst_reset,           //  irq_rcvr_rst.reset
		input  wire        m0_waitrequest,               //            m0.waitrequest
		input  wire [63:0] m0_readdata,                  //              .readdata
		input  wire        m0_readdatavalid,             //              .readdatavalid
		output wire [0:0]  m0_burstcount,                //              .burstcount
		output wire [63:0] m0_writedata,                 //              .writedata
		output wire [15:0] m0_address,                   //              .address
		output wire        m0_write,                     //              .write
		output wire        m0_read,                      //              .read
		output wire [7:0]  m0_byteenable,                //              .byteenable
		output wire        m0_debugaccess,               //              .debugaccess
		input  wire        m0_clk_clk,                   //        m0_clk.clk
		input  wire        m0_rst_reset,                 //        m0_rst.reset
		input  wire        m1_waitrequest,               //            m1.waitrequest
		input  wire [63:0] m1_readdata,                  //              .readdata
		input  wire        m1_readdatavalid,             //              .readdatavalid
		output wire [3:0]  m1_burstcount,                //              .burstcount
		output wire [63:0] m1_writedata,                 //              .writedata
		output wire [16:0] m1_address,                   //              .address
		output wire        m1_write,                     //              .write
		output wire        m1_read,                      //              .read
		output wire [7:0]  m1_byteenable,                //              .byteenable
		output wire        m1_debugaccess,               //              .debugaccess
		input  wire        m1_clk_clk,                   //        m1_clk.clk
		input  wire        m1_rst_reset,                 //        m1_rst.reset
		input  wire        m2_waitrequest,               //            m2.waitrequest
		input  wire [63:0] m2_readdata,                  //              .readdata
		input  wire        m2_readdatavalid,             //              .readdatavalid
		output wire [3:0]  m2_burstcount,                //              .burstcount
		output wire [63:0] m2_writedata,                 //              .writedata
		output wire [19:0] m2_address,                   //              .address
		output wire        m2_write,                     //              .write
		output wire        m2_read,                      //              .read
		output wire [7:0]  m2_byteenable,                //              .byteenable
		output wire        m2_debugaccess,               //              .debugaccess
		input  wire        m2_clk_clk,                   //        m2_clk.clk
		input  wire        m2_rst_reset,                 //        m2_rst.reset
		input  wire        npor_npor,                    //          npor.npor
		input  wire        npor_pin_perst,               //              .pin_perst
		output wire        nreset_status_reset_n,        // nreset_status.reset_n
		input  wire        reconfig_clk_clk,             //  reconfig_clk.clk
		input  wire        reconfig_rst_reset,           //  reconfig_rst.reset
		input  wire        refclk_clk,                   //        refclk.clk
		input  wire        reset_reset_n,                //         reset.reset_n
		input  wire [15:0] rxmirq_irq,                   //        rxmirq.irq
		output wire [15:0] rxmirq_out_irq,               //    rxmirq_out.irq
		input  wire        txs_chipselect,               //           txs.chipselect
		input  wire [7:0]  txs_byteenable,               //              .byteenable
		output wire [63:0] txs_readdata,                 //              .readdata
		input  wire [63:0] txs_writedata,                //              .writedata
		input  wire        txs_read,                     //              .read
		input  wire        txs_write,                    //              .write
		input  wire [6:0]  txs_burstcount,               //              .burstcount
		output wire        txs_readdatavalid,            //              .readdatavalid
		output wire        txs_waitrequest,              //              .waitrequest
		input  wire [12:0] txs_address                   //              .address
	);

	wire   [91:0] pcie_cv_hip_avmm_0_reconfig_from_xcvr_reconfig_from_xcvr;      // pcie_cv_hip_avmm_0:reconfig_from_xcvr -> alt_xcvr_reconfig_0:reconfig_from_xcvr
	wire  [139:0] alt_xcvr_reconfig_0_reconfig_to_xcvr_reconfig_to_xcvr;         // alt_xcvr_reconfig_0:reconfig_to_xcvr -> pcie_cv_hip_avmm_0:reconfig_to_xcvr
	wire          pcie_cv_hip_avmm_0_rxm_bar0_waitrequest;                       // mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_waitrequest -> pcie_cv_hip_avmm_0:RxmWaitRequest_0_i
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar0_readdata;                          // mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_readdata -> pcie_cv_hip_avmm_0:RxmReadData_0_i
	wire   [31:0] pcie_cv_hip_avmm_0_rxm_bar0_address;                           // pcie_cv_hip_avmm_0:RxmAddress_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_address
	wire          pcie_cv_hip_avmm_0_rxm_bar0_read;                              // pcie_cv_hip_avmm_0:RxmRead_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_read
	wire    [7:0] pcie_cv_hip_avmm_0_rxm_bar0_byteenable;                        // pcie_cv_hip_avmm_0:RxmByteEnable_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_byteenable
	wire          pcie_cv_hip_avmm_0_rxm_bar0_readdatavalid;                     // mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_readdatavalid -> pcie_cv_hip_avmm_0:RxmReadDataValid_0_i
	wire          pcie_cv_hip_avmm_0_rxm_bar0_write;                             // pcie_cv_hip_avmm_0:RxmWrite_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_write
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar0_writedata;                         // pcie_cv_hip_avmm_0:RxmWriteData_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_writedata
	wire    [6:0] pcie_cv_hip_avmm_0_rxm_bar0_burstcount;                        // pcie_cv_hip_avmm_0:RxmBurstCount_0_o -> mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_burstcount
	wire   [63:0] mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata;      // mm_clock_crossing_bridge_0:s0_readdata -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_readdata
	wire          mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest;   // mm_clock_crossing_bridge_0:s0_waitrequest -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_waitrequest
	wire          mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess;   // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_debugaccess -> mm_clock_crossing_bridge_0:s0_debugaccess
	wire   [15:0] mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address;       // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_address -> mm_clock_crossing_bridge_0:s0_address
	wire          mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read;          // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_read -> mm_clock_crossing_bridge_0:s0_read
	wire    [7:0] mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable;    // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_byteenable -> mm_clock_crossing_bridge_0:s0_byteenable
	wire          mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid; // mm_clock_crossing_bridge_0:s0_readdatavalid -> mm_interconnect_0:mm_clock_crossing_bridge_0_s0_readdatavalid
	wire          mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write;         // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_write -> mm_clock_crossing_bridge_0:s0_write
	wire   [63:0] mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata;     // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_writedata -> mm_clock_crossing_bridge_0:s0_writedata
	wire    [0:0] mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount;    // mm_interconnect_0:mm_clock_crossing_bridge_0_s0_burstcount -> mm_clock_crossing_bridge_0:s0_burstcount
	wire          pcie_cv_hip_avmm_0_rxm_bar1_waitrequest;                       // mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_waitrequest -> pcie_cv_hip_avmm_0:RxmWaitRequest_1_i
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar1_readdata;                          // mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_readdata -> pcie_cv_hip_avmm_0:RxmReadData_1_i
	wire   [31:0] pcie_cv_hip_avmm_0_rxm_bar1_address;                           // pcie_cv_hip_avmm_0:RxmAddress_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_address
	wire          pcie_cv_hip_avmm_0_rxm_bar1_read;                              // pcie_cv_hip_avmm_0:RxmRead_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_read
	wire    [7:0] pcie_cv_hip_avmm_0_rxm_bar1_byteenable;                        // pcie_cv_hip_avmm_0:RxmByteEnable_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_byteenable
	wire          pcie_cv_hip_avmm_0_rxm_bar1_readdatavalid;                     // mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_readdatavalid -> pcie_cv_hip_avmm_0:RxmReadDataValid_1_i
	wire          pcie_cv_hip_avmm_0_rxm_bar1_write;                             // pcie_cv_hip_avmm_0:RxmWrite_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_write
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar1_writedata;                         // pcie_cv_hip_avmm_0:RxmWriteData_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_writedata
	wire    [6:0] pcie_cv_hip_avmm_0_rxm_bar1_burstcount;                        // pcie_cv_hip_avmm_0:RxmBurstCount_1_o -> mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_burstcount
	wire   [63:0] mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdata;      // mm_clock_crossing_bridge_1:s0_readdata -> mm_interconnect_1:mm_clock_crossing_bridge_1_s0_readdata
	wire          mm_interconnect_1_mm_clock_crossing_bridge_1_s0_waitrequest;   // mm_clock_crossing_bridge_1:s0_waitrequest -> mm_interconnect_1:mm_clock_crossing_bridge_1_s0_waitrequest
	wire          mm_interconnect_1_mm_clock_crossing_bridge_1_s0_debugaccess;   // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_debugaccess -> mm_clock_crossing_bridge_1:s0_debugaccess
	wire   [16:0] mm_interconnect_1_mm_clock_crossing_bridge_1_s0_address;       // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_address -> mm_clock_crossing_bridge_1:s0_address
	wire          mm_interconnect_1_mm_clock_crossing_bridge_1_s0_read;          // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_read -> mm_clock_crossing_bridge_1:s0_read
	wire    [7:0] mm_interconnect_1_mm_clock_crossing_bridge_1_s0_byteenable;    // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_byteenable -> mm_clock_crossing_bridge_1:s0_byteenable
	wire          mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdatavalid; // mm_clock_crossing_bridge_1:s0_readdatavalid -> mm_interconnect_1:mm_clock_crossing_bridge_1_s0_readdatavalid
	wire          mm_interconnect_1_mm_clock_crossing_bridge_1_s0_write;         // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_write -> mm_clock_crossing_bridge_1:s0_write
	wire   [63:0] mm_interconnect_1_mm_clock_crossing_bridge_1_s0_writedata;     // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_writedata -> mm_clock_crossing_bridge_1:s0_writedata
	wire    [3:0] mm_interconnect_1_mm_clock_crossing_bridge_1_s0_burstcount;    // mm_interconnect_1:mm_clock_crossing_bridge_1_s0_burstcount -> mm_clock_crossing_bridge_1:s0_burstcount
	wire          pcie_cv_hip_avmm_0_rxm_bar2_waitrequest;                       // mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_waitrequest -> pcie_cv_hip_avmm_0:RxmWaitRequest_2_i
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar2_readdata;                          // mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_readdata -> pcie_cv_hip_avmm_0:RxmReadData_2_i
	wire   [31:0] pcie_cv_hip_avmm_0_rxm_bar2_address;                           // pcie_cv_hip_avmm_0:RxmAddress_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_address
	wire          pcie_cv_hip_avmm_0_rxm_bar2_read;                              // pcie_cv_hip_avmm_0:RxmRead_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_read
	wire    [7:0] pcie_cv_hip_avmm_0_rxm_bar2_byteenable;                        // pcie_cv_hip_avmm_0:RxmByteEnable_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_byteenable
	wire          pcie_cv_hip_avmm_0_rxm_bar2_readdatavalid;                     // mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_readdatavalid -> pcie_cv_hip_avmm_0:RxmReadDataValid_2_i
	wire          pcie_cv_hip_avmm_0_rxm_bar2_write;                             // pcie_cv_hip_avmm_0:RxmWrite_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_write
	wire   [63:0] pcie_cv_hip_avmm_0_rxm_bar2_writedata;                         // pcie_cv_hip_avmm_0:RxmWriteData_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_writedata
	wire    [6:0] pcie_cv_hip_avmm_0_rxm_bar2_burstcount;                        // pcie_cv_hip_avmm_0:RxmBurstCount_2_o -> mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_burstcount
	wire   [63:0] mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdata;      // mm_clock_crossing_bridge_2:s0_readdata -> mm_interconnect_2:mm_clock_crossing_bridge_2_s0_readdata
	wire          mm_interconnect_2_mm_clock_crossing_bridge_2_s0_waitrequest;   // mm_clock_crossing_bridge_2:s0_waitrequest -> mm_interconnect_2:mm_clock_crossing_bridge_2_s0_waitrequest
	wire          mm_interconnect_2_mm_clock_crossing_bridge_2_s0_debugaccess;   // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_debugaccess -> mm_clock_crossing_bridge_2:s0_debugaccess
	wire   [19:0] mm_interconnect_2_mm_clock_crossing_bridge_2_s0_address;       // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_address -> mm_clock_crossing_bridge_2:s0_address
	wire          mm_interconnect_2_mm_clock_crossing_bridge_2_s0_read;          // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_read -> mm_clock_crossing_bridge_2:s0_read
	wire    [7:0] mm_interconnect_2_mm_clock_crossing_bridge_2_s0_byteenable;    // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_byteenable -> mm_clock_crossing_bridge_2:s0_byteenable
	wire          mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdatavalid; // mm_clock_crossing_bridge_2:s0_readdatavalid -> mm_interconnect_2:mm_clock_crossing_bridge_2_s0_readdatavalid
	wire          mm_interconnect_2_mm_clock_crossing_bridge_2_s0_write;         // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_write -> mm_clock_crossing_bridge_2:s0_write
	wire   [63:0] mm_interconnect_2_mm_clock_crossing_bridge_2_s0_writedata;     // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_writedata -> mm_clock_crossing_bridge_2:s0_writedata
	wire    [3:0] mm_interconnect_2_mm_clock_crossing_bridge_2_s0_burstcount;    // mm_interconnect_2:mm_clock_crossing_bridge_2_s0_burstcount -> mm_clock_crossing_bridge_2:s0_burstcount
	wire          rst_controller_reset_out_reset;                                // rst_controller:reset_out -> [mm_interconnect_0:pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_1:pcie_cv_hip_avmm_0_Rxm_BAR1_translator_reset_reset_bridge_in_reset_reset, mm_interconnect_2:pcie_cv_hip_avmm_0_Rxm_BAR2_translator_reset_reset_bridge_in_reset_reset]

	alt_xcvr_reconfig #(
		.device_family                 ("Cyclone V"),
		.number_of_reconfig_interfaces (2),
		.enable_offset                 (1),
		.enable_lc                     (0),
		.enable_dcd                    (0),
		.enable_dcd_power_up           (1),
		.enable_analog                 (0),
		.enable_eyemon                 (0),
		.enable_ber                    (0),
		.enable_dfe                    (0),
		.enable_adce                   (0),
		.enable_mif                    (0),
		.enable_pll                    (0)
	) alt_xcvr_reconfig_0 (
		.reconfig_busy             (),                                                         //      reconfig_busy.reconfig_busy
		.mgmt_clk_clk              (reconfig_clk_clk),                                         //       mgmt_clk_clk.clk
		.mgmt_rst_reset            (reconfig_rst_reset),                                       //     mgmt_rst_reset.reset
		.reconfig_mgmt_address     (),                                                         //      reconfig_mgmt.address
		.reconfig_mgmt_read        (),                                                         //                   .read
		.reconfig_mgmt_readdata    (),                                                         //                   .readdata
		.reconfig_mgmt_waitrequest (),                                                         //                   .waitrequest
		.reconfig_mgmt_write       (),                                                         //                   .write
		.reconfig_mgmt_writedata   (),                                                         //                   .writedata
		.reconfig_to_xcvr          (alt_xcvr_reconfig_0_reconfig_to_xcvr_reconfig_to_xcvr),    //   reconfig_to_xcvr.reconfig_to_xcvr
		.reconfig_from_xcvr        (pcie_cv_hip_avmm_0_reconfig_from_xcvr_reconfig_from_xcvr), // reconfig_from_xcvr.reconfig_from_xcvr
		.tx_cal_busy               (),                                                         //        (terminated)
		.rx_cal_busy               (),                                                         //        (terminated)
		.cal_busy_in               (1'b0),                                                     //        (terminated)
		.reconfig_mif_address      (),                                                         //        (terminated)
		.reconfig_mif_read         (),                                                         //        (terminated)
		.reconfig_mif_readdata     (16'b0000000000000000),                                     //        (terminated)
		.reconfig_mif_waitrequest  (1'b0)                                                      //        (terminated)
	);

	altera_irq_clock_crosser #(
		.IRQ_WIDTH (16)
	) irq_clock_crosser_0 (
		.receiver_clk   (irq_rcvr_clk_clk),   //       receiver_clk.clk
		.sender_clk     (clk_clk),            //         sender_clk.clk
		.receiver_reset (irq_rcvr_rst_reset), // receiver_clk_reset.reset
		.sender_reset   (~reset_reset_n),     //   sender_clk_reset.reset
		.receiver_irq   (irq_irq),            //           receiver.irq
		.sender_irq     (rxmirq_out_irq)      //             sender.irq
	);

	altera_avalon_mm_clock_crossing_bridge #(
		.DATA_WIDTH          (64),
		.SYMBOL_WIDTH        (8),
		.HDL_ADDR_WIDTH      (16),
		.BURSTCOUNT_WIDTH    (1),
		.COMMAND_FIFO_DEPTH  (4),
		.RESPONSE_FIFO_DEPTH (4),
		.MASTER_SYNC_DEPTH   (2),
		.SLAVE_SYNC_DEPTH    (2)
	) mm_clock_crossing_bridge_0 (
		.m0_clk           (m0_clk_clk),                                                    //   m0_clk.clk
		.m0_reset         (m0_rst_reset),                                                  // m0_reset.reset
		.s0_clk           (clk_clk),                                                       //   s0_clk.clk
		.s0_reset         (~reset_reset_n),                                                // s0_reset.reset
		.s0_waitrequest   (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest),   //       s0.waitrequest
		.s0_readdata      (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata),      //         .readdata
		.s0_readdatavalid (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid), //         .readdatavalid
		.s0_burstcount    (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount),    //         .burstcount
		.s0_writedata     (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata),     //         .writedata
		.s0_address       (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address),       //         .address
		.s0_write         (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write),         //         .write
		.s0_read          (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read),          //         .read
		.s0_byteenable    (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable),    //         .byteenable
		.s0_debugaccess   (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess),   //         .debugaccess
		.m0_waitrequest   (m0_waitrequest),                                                //       m0.waitrequest
		.m0_readdata      (m0_readdata),                                                   //         .readdata
		.m0_readdatavalid (m0_readdatavalid),                                              //         .readdatavalid
		.m0_burstcount    (m0_burstcount),                                                 //         .burstcount
		.m0_writedata     (m0_writedata),                                                  //         .writedata
		.m0_address       (m0_address),                                                    //         .address
		.m0_write         (m0_write),                                                      //         .write
		.m0_read          (m0_read),                                                       //         .read
		.m0_byteenable    (m0_byteenable),                                                 //         .byteenable
		.m0_debugaccess   (m0_debugaccess)                                                 //         .debugaccess
	);

	altera_avalon_mm_clock_crossing_bridge #(
		.DATA_WIDTH          (64),
		.SYMBOL_WIDTH        (8),
		.HDL_ADDR_WIDTH      (17),
		.BURSTCOUNT_WIDTH    (4),
		.COMMAND_FIFO_DEPTH  (4),
		.RESPONSE_FIFO_DEPTH (16),
		.MASTER_SYNC_DEPTH   (2),
		.SLAVE_SYNC_DEPTH    (2)
	) mm_clock_crossing_bridge_1 (
		.m0_clk           (m1_clk_clk),                                                    //   m0_clk.clk
		.m0_reset         (m1_rst_reset),                                                  // m0_reset.reset
		.s0_clk           (clk_clk),                                                       //   s0_clk.clk
		.s0_reset         (~reset_reset_n),                                                // s0_reset.reset
		.s0_waitrequest   (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_waitrequest),   //       s0.waitrequest
		.s0_readdata      (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdata),      //         .readdata
		.s0_readdatavalid (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdatavalid), //         .readdatavalid
		.s0_burstcount    (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_burstcount),    //         .burstcount
		.s0_writedata     (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_writedata),     //         .writedata
		.s0_address       (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_address),       //         .address
		.s0_write         (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_write),         //         .write
		.s0_read          (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_read),          //         .read
		.s0_byteenable    (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_byteenable),    //         .byteenable
		.s0_debugaccess   (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_debugaccess),   //         .debugaccess
		.m0_waitrequest   (m1_waitrequest),                                                //       m0.waitrequest
		.m0_readdata      (m1_readdata),                                                   //         .readdata
		.m0_readdatavalid (m1_readdatavalid),                                              //         .readdatavalid
		.m0_burstcount    (m1_burstcount),                                                 //         .burstcount
		.m0_writedata     (m1_writedata),                                                  //         .writedata
		.m0_address       (m1_address),                                                    //         .address
		.m0_write         (m1_write),                                                      //         .write
		.m0_read          (m1_read),                                                       //         .read
		.m0_byteenable    (m1_byteenable),                                                 //         .byteenable
		.m0_debugaccess   (m1_debugaccess)                                                 //         .debugaccess
	);

	altera_avalon_mm_clock_crossing_bridge #(
		.DATA_WIDTH          (64),
		.SYMBOL_WIDTH        (8),
		.HDL_ADDR_WIDTH      (20),
		.BURSTCOUNT_WIDTH    (4),
		.COMMAND_FIFO_DEPTH  (4),
		.RESPONSE_FIFO_DEPTH (16),
		.MASTER_SYNC_DEPTH   (2),
		.SLAVE_SYNC_DEPTH    (2)
	) mm_clock_crossing_bridge_2 (
		.m0_clk           (m2_clk_clk),                                                    //   m0_clk.clk
		.m0_reset         (m2_rst_reset),                                                  // m0_reset.reset
		.s0_clk           (clk_clk),                                                       //   s0_clk.clk
		.s0_reset         (~reset_reset_n),                                                // s0_reset.reset
		.s0_waitrequest   (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_waitrequest),   //       s0.waitrequest
		.s0_readdata      (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdata),      //         .readdata
		.s0_readdatavalid (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdatavalid), //         .readdatavalid
		.s0_burstcount    (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_burstcount),    //         .burstcount
		.s0_writedata     (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_writedata),     //         .writedata
		.s0_address       (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_address),       //         .address
		.s0_write         (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_write),         //         .write
		.s0_read          (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_read),          //         .read
		.s0_byteenable    (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_byteenable),    //         .byteenable
		.s0_debugaccess   (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_debugaccess),   //         .debugaccess
		.m0_waitrequest   (m2_waitrequest),                                                //       m0.waitrequest
		.m0_readdata      (m2_readdata),                                                   //         .readdata
		.m0_readdatavalid (m2_readdatavalid),                                              //         .readdatavalid
		.m0_burstcount    (m2_burstcount),                                                 //         .burstcount
		.m0_writedata     (m2_writedata),                                                  //         .writedata
		.m0_address       (m2_address),                                                    //         .address
		.m0_write         (m2_write),                                                      //         .write
		.m0_read          (m2_read),                                                       //         .read
		.m0_byteenable    (m2_byteenable),                                                 //         .byteenable
		.m0_debugaccess   (m2_debugaccess)                                                 //         .debugaccess
	);

	altpcie_cv_hip_avmm_hwtcl #(
		.lane_mask_hwtcl                          ("x1"),
		.gen123_lane_rate_mode_hwtcl              ("Gen2 (5.0 Gbps)"),
		.port_type_hwtcl                          ("Native endpoint"),
		.pcie_spec_version_hwtcl                  ("2.1"),
		.pll_refclk_freq_hwtcl                    ("100 MHz"),
		.set_pld_clk_x1_625MHz_hwtcl              (0),
		.in_cvp_mode_hwtcl                        (0),
		.bar0_size_mask_hwtcl                     (16),
		.bar0_io_space_hwtcl                      ("Disabled"),
		.bar0_64bit_mem_space_hwtcl               ("Disabled"),
		.bar0_prefetchable_hwtcl                  ("Disabled"),
		.bar1_size_mask_hwtcl                     (17),
		.bar1_io_space_hwtcl                      ("Disabled"),
		.bar1_prefetchable_hwtcl                  ("Disabled"),
		.bar2_size_mask_hwtcl                     (20),
		.bar2_io_space_hwtcl                      ("Disabled"),
		.bar2_64bit_mem_space_hwtcl               ("Disabled"),
		.bar2_prefetchable_hwtcl                  ("Disabled"),
		.bar3_size_mask_hwtcl                     (0),
		.bar3_io_space_hwtcl                      ("Disabled"),
		.bar3_prefetchable_hwtcl                  ("Disabled"),
		.bar4_size_mask_hwtcl                     (0),
		.bar4_io_space_hwtcl                      ("Disabled"),
		.bar4_64bit_mem_space_hwtcl               ("Disabled"),
		.bar4_prefetchable_hwtcl                  ("Disabled"),
		.bar5_size_mask_hwtcl                     (0),
		.bar5_io_space_hwtcl                      ("Disabled"),
		.bar5_prefetchable_hwtcl                  ("Disabled"),
		.CB_P2A_AVALON_ADDR_B0                    (0),
		.CB_P2A_AVALON_ADDR_B1                    (0),
		.CB_P2A_AVALON_ADDR_B2                    (0),
		.CB_P2A_AVALON_ADDR_B3                    (0),
		.CB_P2A_AVALON_ADDR_B4                    (0),
		.CB_P2A_AVALON_ADDR_B5                    (0),
		.vendor_id_hwtcl                          (4466),
		.device_id_hwtcl                          (57345),
		.revision_id_hwtcl                        (1),
		.class_code_hwtcl                         (16711680),
		.subsystem_vendor_id_hwtcl                (0),
		.subsystem_device_id_hwtcl                (0),
		.max_payload_size_hwtcl                   (128),
		.extend_tag_field_hwtcl                   ("32"),
		.completion_timeout_hwtcl                 ("ABCD"),
		.enable_completion_timeout_disable_hwtcl  (1),
		.use_aer_hwtcl                            (0),
		.ecrc_check_capable_hwtcl                 (0),
		.ecrc_gen_capable_hwtcl                   (0),
		.use_crc_forwarding_hwtcl                 (0),
		.port_link_number_hwtcl                   (1),
		.dll_active_report_support_hwtcl          (0),
		.surprise_down_error_support_hwtcl        (0),
		.slotclkcfg_hwtcl                         (1),
		.msi_multi_message_capable_hwtcl          ("4"),
		.msi_64bit_addressing_capable_hwtcl       ("true"),
		.msi_masking_capable_hwtcl                ("false"),
		.msi_support_hwtcl                        ("true"),
		.enable_function_msix_support_hwtcl       (0),
		.msix_table_size_hwtcl                    (0),
		.msix_table_offset_hwtcl                  ("0"),
		.msix_table_bir_hwtcl                     (0),
		.msix_pba_offset_hwtcl                    ("0"),
		.msix_pba_bir_hwtcl                       (0),
		.enable_slot_register_hwtcl               (0),
		.slot_power_scale_hwtcl                   (0),
		.slot_power_limit_hwtcl                   (0),
		.slot_number_hwtcl                        (0),
		.rx_ei_l0s_hwtcl                          (0),
		.endpoint_l0_latency_hwtcl                (0),
		.endpoint_l1_latency_hwtcl                (0),
		.vsec_id_hwtcl                            (4466),
		.vsec_rev_hwtcl                           (0),
		.user_id_hwtcl                            (0),
		.avmm_width_hwtcl                         (64),
		.AVALON_ADDR_WIDTH                        (32),
		.avmm_burst_width_hwtcl                   (7),
		.CB_PCIE_MODE                             (0),
		.CB_PCIE_RX_LITE                          (0),
		.CB_RXM_DATA_WIDTH                        (64),
		.CG_AVALON_S_ADDR_WIDTH                   (13),
		.CG_IMPL_CRA_AV_SLAVE_PORT                (1),
		.CG_ENABLE_ADVANCED_INTERRUPT             (0),
		.CG_ENABLE_A2P_INTERRUPT                  (1),
		.CB_A2P_ADDR_MAP_IS_FIXED                 (0),
		.CB_A2P_ADDR_MAP_NUM_ENTRIES              (2),
		.BYPASSS_A2P_TRANSLATION                  (0),
		.a2p_pass_thru_bits                       (12),
		.ast_width_hwtcl                          ("Avalon-ST 64-bit"),
		.use_ast_parity                           (0),
		.reconfig_to_xcvr_width                   (140),
		.hip_hard_reset_hwtcl                     (1),
		.reconfig_from_xcvr_width                 (92),
		.bypass_cdc_hwtcl                         ("false"),
		.single_rx_detect_hwtcl                   (1),
		.wrong_device_id_hwtcl                    ("disable"),
		.data_pack_rx_hwtcl                       ("disable"),
		.ltssm_1ms_timeout_hwtcl                  ("disable"),
		.ltssm_freqlocked_check_hwtcl             ("disable"),
		.deskew_comma_hwtcl                       ("skp_eieos_deskw"),
		.maximum_current_hwtcl                    (0),
		.disable_snoop_packet_hwtcl               ("false"),
		.enable_l0s_aspm_hwtcl                    ("true"),
		.extended_tag_reset_hwtcl                 ("false"),
		.interrupt_pin_hwtcl                      ("inta"),
		.bridge_port_vga_enable_hwtcl             ("false"),
		.bridge_port_ssid_support_hwtcl           ("false"),
		.ssvid_hwtcl                              (0),
		.ssid_hwtcl                               (0),
		.aspm_config_management_hwtcl             ("false"),
		.atomic_op_routing_hwtcl                  ("false"),
		.atomic_op_completer_32bit_hwtcl          ("false"),
		.atomic_op_completer_64bit_hwtcl          ("false"),
		.cas_completer_128bit_hwtcl               ("false"),
		.ltr_mechanism_hwtcl                      ("false"),
		.tph_completer_hwtcl                      ("false"),
		.extended_format_field_hwtcl              ("true"),
		.atomic_malformed_hwtcl                   ("true"),
		.flr_capability_hwtcl                     (0),
		.enable_adapter_half_rate_mode_hwtcl      ("false"),
		.skp_os_gen3_count_hwtcl                  (0),
		.millisecond_cycle_count_hwtcl            (124250),
		.credit_buffer_allocation_aux_hwtcl       ("absolute"),
		.vc0_rx_flow_ctrl_posted_header_hwtcl     (16),
		.vc0_rx_flow_ctrl_posted_data_hwtcl       (16),
		.vc0_rx_flow_ctrl_nonposted_header_hwtcl  (16),
		.vc0_rx_flow_ctrl_nonposted_data_hwtcl    (0),
		.vc0_rx_flow_ctrl_compl_header_hwtcl      (0),
		.vc0_rx_flow_ctrl_compl_data_hwtcl        (0),
		.cpl_spc_header_hwtcl                     (67),
		.cpl_spc_data_hwtcl                       (269),
		.coreclkout_hip_phaseshift_hwtcl          ("0 ps"),
		.pldclk_hip_phase_shift_hwtcl             ("0 ps"),
		.port_width_be_hwtcl                      (8),
		.port_width_data_hwtcl                    (64),
		.hip_reconfig_hwtcl                       (0),
		.gen3_rxfreqlock_counter_hwtcl            (0),
		.gen3_skip_ph2_ph3_hwtcl                  (0),
		.g3_bypass_equlz_hwtcl                    (0),
		.expansion_base_address_register_hwtcl    (0),
		.prefetchable_mem_window_addr_width_hwtcl (0),
		.bypass_clk_switch_hwtcl                  ("disable"),
		.cvp_rate_sel_hwtcl                       ("full_rate"),
		.cvp_data_compressed_hwtcl                ("false"),
		.cvp_data_encrypted_hwtcl                 ("false"),
		.cvp_mode_reset_hwtcl                     ("false"),
		.cvp_clk_reset_hwtcl                      ("false"),
		.core_clk_sel_hwtcl                       ("pld_clk"),
		.enable_rx_buffer_checking_hwtcl          ("false"),
		.disable_link_x2_support_hwtcl            ("false"),
		.device_number_hwtcl                      (0),
		.pipex1_debug_sel_hwtcl                   ("disable"),
		.pclk_out_sel_hwtcl                       ("pclk"),
		.no_soft_reset_hwtcl                      ("false"),
		.d1_support_hwtcl                         ("false"),
		.d2_support_hwtcl                         ("false"),
		.d0_pme_hwtcl                             ("false"),
		.d1_pme_hwtcl                             ("false"),
		.d2_pme_hwtcl                             ("false"),
		.d3_hot_pme_hwtcl                         ("false"),
		.d3_cold_pme_hwtcl                        ("false"),
		.low_priority_vc_hwtcl                    ("single_vc"),
		.enable_l1_aspm_hwtcl                     ("false"),
		.l1_exit_latency_sameclock_hwtcl          (0),
		.l1_exit_latency_diffclock_hwtcl          (0),
		.hot_plug_support_hwtcl                   (0),
		.no_command_completed_hwtcl               ("false"),
		.eie_before_nfts_count_hwtcl              (4),
		.gen2_diffclock_nfts_count_hwtcl          (255),
		.gen2_sameclock_nfts_count_hwtcl          (255),
		.deemphasis_enable_hwtcl                  ("false"),
		.l0_exit_latency_sameclock_hwtcl          (6),
		.l0_exit_latency_diffclock_hwtcl          (6),
		.vc0_clk_enable_hwtcl                     ("true"),
		.register_pipe_signals_hwtcl              ("true"),
		.tx_cdc_almost_empty_hwtcl                (5),
		.rx_l0s_count_idl_hwtcl                   (0),
		.cdc_dummy_insert_limit_hwtcl             (11),
		.ei_delay_powerdown_count_hwtcl           (10),
		.skp_os_schedule_count_hwtcl              (0),
		.fc_init_timer_hwtcl                      (1024),
		.l01_entry_latency_hwtcl                  (31),
		.flow_control_update_count_hwtcl          (30),
		.flow_control_timeout_count_hwtcl         (200),
		.retry_buffer_last_active_address_hwtcl   (255),
		.reserved_debug_hwtcl                     (0),
		.use_tl_cfg_sync_hwtcl                    (1),
		.diffclock_nfts_count_hwtcl               (255),
		.sameclock_nfts_count_hwtcl               (255),
		.l2_async_logic_hwtcl                     ("disable"),
		.rx_cdc_almost_full_hwtcl                 (12),
		.tx_cdc_almost_full_hwtcl                 (11),
		.indicator_hwtcl                          (0),
		.rpre_emph_a_val_hwtcl                    (11),
		.rpre_emph_b_val_hwtcl                    (0),
		.rpre_emph_c_val_hwtcl                    (22),
		.rpre_emph_d_val_hwtcl                    (12),
		.rpre_emph_e_val_hwtcl                    (21),
		.rvod_sel_a_val_hwtcl                     (50),
		.rvod_sel_b_val_hwtcl                     (34),
		.rvod_sel_c_val_hwtcl                     (50),
		.rvod_sel_d_val_hwtcl                     (50),
		.rvod_sel_e_val_hwtcl                     (9)
	) pcie_cv_hip_avmm_0 (
		.coreclkout           (coreclkout_clk),                                           //          coreclkout.clk
		.refclk               (refclk_clk),                                               //              refclk.clk
		.npor                 (npor_npor),                                                //                npor.npor
		.pin_perst            (npor_pin_perst),                                           //                    .pin_perst
		.reset_status         (nreset_status_reset_n),                                    //       nreset_status.reset_n
		.test_in              (hip_ctrl_test_in),                                         //            hip_ctrl.test_in
		.simu_mode_pipe       (hip_ctrl_simu_mode_pipe),                                  //                    .simu_mode_pipe
		.RxmAddress_0_o       (pcie_cv_hip_avmm_0_rxm_bar0_address),                      //            Rxm_BAR0.address
		.RxmRead_0_o          (pcie_cv_hip_avmm_0_rxm_bar0_read),                         //                    .read
		.RxmWaitRequest_0_i   (pcie_cv_hip_avmm_0_rxm_bar0_waitrequest),                  //                    .waitrequest
		.RxmWrite_0_o         (pcie_cv_hip_avmm_0_rxm_bar0_write),                        //                    .write
		.RxmReadDataValid_0_i (pcie_cv_hip_avmm_0_rxm_bar0_readdatavalid),                //                    .readdatavalid
		.RxmReadData_0_i      (pcie_cv_hip_avmm_0_rxm_bar0_readdata),                     //                    .readdata
		.RxmWriteData_0_o     (pcie_cv_hip_avmm_0_rxm_bar0_writedata),                    //                    .writedata
		.RxmBurstCount_0_o    (pcie_cv_hip_avmm_0_rxm_bar0_burstcount),                   //                    .burstcount
		.RxmByteEnable_0_o    (pcie_cv_hip_avmm_0_rxm_bar0_byteenable),                   //                    .byteenable
		.RxmAddress_1_o       (pcie_cv_hip_avmm_0_rxm_bar1_address),                      //            Rxm_BAR1.address
		.RxmRead_1_o          (pcie_cv_hip_avmm_0_rxm_bar1_read),                         //                    .read
		.RxmWaitRequest_1_i   (pcie_cv_hip_avmm_0_rxm_bar1_waitrequest),                  //                    .waitrequest
		.RxmWrite_1_o         (pcie_cv_hip_avmm_0_rxm_bar1_write),                        //                    .write
		.RxmReadDataValid_1_i (pcie_cv_hip_avmm_0_rxm_bar1_readdatavalid),                //                    .readdatavalid
		.RxmReadData_1_i      (pcie_cv_hip_avmm_0_rxm_bar1_readdata),                     //                    .readdata
		.RxmWriteData_1_o     (pcie_cv_hip_avmm_0_rxm_bar1_writedata),                    //                    .writedata
		.RxmBurstCount_1_o    (pcie_cv_hip_avmm_0_rxm_bar1_burstcount),                   //                    .burstcount
		.RxmByteEnable_1_o    (pcie_cv_hip_avmm_0_rxm_bar1_byteenable),                   //                    .byteenable
		.RxmAddress_2_o       (pcie_cv_hip_avmm_0_rxm_bar2_address),                      //            Rxm_BAR2.address
		.RxmRead_2_o          (pcie_cv_hip_avmm_0_rxm_bar2_read),                         //                    .read
		.RxmWaitRequest_2_i   (pcie_cv_hip_avmm_0_rxm_bar2_waitrequest),                  //                    .waitrequest
		.RxmWrite_2_o         (pcie_cv_hip_avmm_0_rxm_bar2_write),                        //                    .write
		.RxmReadDataValid_2_i (pcie_cv_hip_avmm_0_rxm_bar2_readdatavalid),                //                    .readdatavalid
		.RxmReadData_2_i      (pcie_cv_hip_avmm_0_rxm_bar2_readdata),                     //                    .readdata
		.RxmWriteData_2_o     (pcie_cv_hip_avmm_0_rxm_bar2_writedata),                    //                    .writedata
		.RxmBurstCount_2_o    (pcie_cv_hip_avmm_0_rxm_bar2_burstcount),                   //                    .burstcount
		.RxmByteEnable_2_o    (pcie_cv_hip_avmm_0_rxm_bar2_byteenable),                   //                    .byteenable
		.RxmIrq_i             (rxmirq_irq),                                               //              RxmIrq.irq
		.derr_cor_ext_rcv     (hip_status_derr_cor_ext_rcv),                              //          hip_status.derr_cor_ext_rcv
		.derr_cor_ext_rpl     (hip_status_derr_cor_ext_rpl),                              //                    .derr_cor_ext_rpl
		.derr_rpl             (hip_status_derr_rpl),                                      //                    .derr_rpl
		.dlup_exit            (hip_status_dlup_exit),                                     //                    .dlup_exit
		.ltssmstate           (hip_status_ltssmstate),                                    //                    .ltssmstate
		.ev128ns              (hip_status_ev128ns),                                       //                    .ev128ns
		.ev1us                (hip_status_ev1us),                                         //                    .ev1us
		.hotrst_exit          (hip_status_hotrst_exit),                                   //                    .hotrst_exit
		.int_status           (hip_status_int_status),                                    //                    .int_status
		.l2_exit              (hip_status_l2_exit),                                       //                    .l2_exit
		.lane_act             (hip_status_lane_act),                                      //                    .lane_act
		.ko_cpl_spc_header    (hip_status_ko_cpl_spc_header),                             //                    .ko_cpl_spc_header
		.ko_cpl_spc_data      (hip_status_ko_cpl_spc_data),                               //                    .ko_cpl_spc_data
		.currentspeed         (),                                                         //    hip_currentspeed.currentspeed
		.reconfig_to_xcvr     (alt_xcvr_reconfig_0_reconfig_to_xcvr_reconfig_to_xcvr),    //    reconfig_to_xcvr.reconfig_to_xcvr
		.busy_xcvr_reconfig   (),                                                         //       reconfig_busy.reconfig_busy
		.reconfig_from_xcvr   (pcie_cv_hip_avmm_0_reconfig_from_xcvr_reconfig_from_xcvr), //  reconfig_from_xcvr.reconfig_from_xcvr
		.fixedclk_locked      (),                                                         // reconfig_clk_locked.fixedclk_locked
		.rx_in0               (hip_serial_rx_in0),                                        //          hip_serial.rx_in0
		.tx_out0              (hip_serial_tx_out0),                                       //                    .tx_out0
		.sim_pipe_pclk_in     (hip_pipe_sim_pipe_pclk_in),                                //            hip_pipe.sim_pipe_pclk_in
		.sim_pipe_rate        (hip_pipe_sim_pipe_rate),                                   //                    .sim_pipe_rate
		.sim_ltssmstate       (hip_pipe_sim_ltssmstate),                                  //                    .sim_ltssmstate
		.eidleinfersel0       (hip_pipe_eidleinfersel0),                                  //                    .eidleinfersel0
		.powerdown0           (hip_pipe_powerdown0),                                      //                    .powerdown0
		.rxpolarity0          (hip_pipe_rxpolarity0),                                     //                    .rxpolarity0
		.txcompl0             (hip_pipe_txcompl0),                                        //                    .txcompl0
		.txdata0              (hip_pipe_txdata0),                                         //                    .txdata0
		.txdatak0             (hip_pipe_txdatak0),                                        //                    .txdatak0
		.txdetectrx0          (hip_pipe_txdetectrx0),                                     //                    .txdetectrx0
		.txelecidle0          (hip_pipe_txelecidle0),                                     //                    .txelecidle0
		.txswing0             (hip_pipe_txswing0),                                        //                    .txswing0
		.txmargin0            (hip_pipe_txmargin0),                                       //                    .txmargin0
		.txdeemph0            (hip_pipe_txdeemph0),                                       //                    .txdeemph0
		.phystatus0           (hip_pipe_phystatus0),                                      //                    .phystatus0
		.rxdata0              (hip_pipe_rxdata0),                                         //                    .rxdata0
		.rxdatak0             (hip_pipe_rxdatak0),                                        //                    .rxdatak0
		.rxelecidle0          (hip_pipe_rxelecidle0),                                     //                    .rxelecidle0
		.rxstatus0            (hip_pipe_rxstatus0),                                       //                    .rxstatus0
		.rxvalid0             (hip_pipe_rxvalid0),                                        //                    .rxvalid0
		.TxsChipSelect_i      (txs_chipselect),                                           //                 Txs.chipselect
		.TxsByteEnable_i      (txs_byteenable),                                           //                    .byteenable
		.TxsReadData_o        (txs_readdata),                                             //                    .readdata
		.TxsWriteData_i       (txs_writedata),                                            //                    .writedata
		.TxsRead_i            (txs_read),                                                 //                    .read
		.TxsWrite_i           (txs_write),                                                //                    .write
		.TxsBurstCount_i      (txs_burstcount),                                           //                    .burstcount
		.TxsReadDataValid_o   (txs_readdatavalid),                                        //                    .readdatavalid
		.TxsWaitRequest_o     (txs_waitrequest),                                          //                    .waitrequest
		.TxsAddress_i         (txs_address),                                              //                    .address
		.CraChipSelect_i      (cra_chipselect),                                           //                 Cra.chipselect
		.CraAddress_i         (cra_address),                                              //                    .address
		.CraByteEnable_i      (cra_byteenable),                                           //                    .byteenable
		.CraRead              (cra_read),                                                 //                    .read
		.CraReadData_o        (cra_readdata),                                             //                    .readdata
		.CraWrite             (cra_write),                                                //                    .write
		.CraWriteData_i       (cra_writedata),                                            //                    .writedata
		.CraWaitRequest_o     (cra_waitrequest),                                          //                    .waitrequest
		.CraIrq_o             (crairq_irq),                                               //              CraIrq.irq
		.rx_in1               (1'b0),                                                     //         (terminated)
		.rx_in2               (1'b0),                                                     //         (terminated)
		.rx_in3               (1'b0),                                                     //         (terminated)
		.rx_in4               (1'b0),                                                     //         (terminated)
		.rx_in5               (1'b0),                                                     //         (terminated)
		.rx_in6               (1'b0),                                                     //         (terminated)
		.rx_in7               (1'b0),                                                     //         (terminated)
		.tx_out1              (),                                                         //         (terminated)
		.tx_out2              (),                                                         //         (terminated)
		.tx_out3              (),                                                         //         (terminated)
		.tx_out4              (),                                                         //         (terminated)
		.tx_out5              (),                                                         //         (terminated)
		.tx_out6              (),                                                         //         (terminated)
		.tx_out7              (),                                                         //         (terminated)
		.eidleinfersel1       (),                                                         //         (terminated)
		.eidleinfersel2       (),                                                         //         (terminated)
		.eidleinfersel3       (),                                                         //         (terminated)
		.eidleinfersel4       (),                                                         //         (terminated)
		.eidleinfersel5       (),                                                         //         (terminated)
		.eidleinfersel6       (),                                                         //         (terminated)
		.eidleinfersel7       (),                                                         //         (terminated)
		.powerdown1           (),                                                         //         (terminated)
		.powerdown2           (),                                                         //         (terminated)
		.powerdown3           (),                                                         //         (terminated)
		.powerdown4           (),                                                         //         (terminated)
		.powerdown5           (),                                                         //         (terminated)
		.powerdown6           (),                                                         //         (terminated)
		.powerdown7           (),                                                         //         (terminated)
		.rxpolarity1          (),                                                         //         (terminated)
		.rxpolarity2          (),                                                         //         (terminated)
		.rxpolarity3          (),                                                         //         (terminated)
		.rxpolarity4          (),                                                         //         (terminated)
		.rxpolarity5          (),                                                         //         (terminated)
		.rxpolarity6          (),                                                         //         (terminated)
		.rxpolarity7          (),                                                         //         (terminated)
		.txcompl1             (),                                                         //         (terminated)
		.txcompl2             (),                                                         //         (terminated)
		.txcompl3             (),                                                         //         (terminated)
		.txcompl4             (),                                                         //         (terminated)
		.txcompl5             (),                                                         //         (terminated)
		.txcompl6             (),                                                         //         (terminated)
		.txcompl7             (),                                                         //         (terminated)
		.txdata1              (),                                                         //         (terminated)
		.txdata2              (),                                                         //         (terminated)
		.txdata3              (),                                                         //         (terminated)
		.txdata4              (),                                                         //         (terminated)
		.txdata5              (),                                                         //         (terminated)
		.txdata6              (),                                                         //         (terminated)
		.txdata7              (),                                                         //         (terminated)
		.txdatak1             (),                                                         //         (terminated)
		.txdatak2             (),                                                         //         (terminated)
		.txdatak3             (),                                                         //         (terminated)
		.txdatak4             (),                                                         //         (terminated)
		.txdatak5             (),                                                         //         (terminated)
		.txdatak6             (),                                                         //         (terminated)
		.txdatak7             (),                                                         //         (terminated)
		.txdetectrx1          (),                                                         //         (terminated)
		.txdetectrx2          (),                                                         //         (terminated)
		.txdetectrx3          (),                                                         //         (terminated)
		.txdetectrx4          (),                                                         //         (terminated)
		.txdetectrx5          (),                                                         //         (terminated)
		.txdetectrx6          (),                                                         //         (terminated)
		.txdetectrx7          (),                                                         //         (terminated)
		.txelecidle1          (),                                                         //         (terminated)
		.txelecidle2          (),                                                         //         (terminated)
		.txelecidle3          (),                                                         //         (terminated)
		.txelecidle4          (),                                                         //         (terminated)
		.txelecidle5          (),                                                         //         (terminated)
		.txelecidle6          (),                                                         //         (terminated)
		.txelecidle7          (),                                                         //         (terminated)
		.txswing1             (),                                                         //         (terminated)
		.txswing2             (),                                                         //         (terminated)
		.txswing3             (),                                                         //         (terminated)
		.txswing4             (),                                                         //         (terminated)
		.txswing5             (),                                                         //         (terminated)
		.txswing6             (),                                                         //         (terminated)
		.txswing7             (),                                                         //         (terminated)
		.txmargin1            (),                                                         //         (terminated)
		.txmargin2            (),                                                         //         (terminated)
		.txmargin3            (),                                                         //         (terminated)
		.txmargin4            (),                                                         //         (terminated)
		.txmargin5            (),                                                         //         (terminated)
		.txmargin6            (),                                                         //         (terminated)
		.txmargin7            (),                                                         //         (terminated)
		.txdeemph1            (),                                                         //         (terminated)
		.txdeemph2            (),                                                         //         (terminated)
		.txdeemph3            (),                                                         //         (terminated)
		.txdeemph4            (),                                                         //         (terminated)
		.txdeemph5            (),                                                         //         (terminated)
		.txdeemph6            (),                                                         //         (terminated)
		.txdeemph7            (),                                                         //         (terminated)
		.phystatus1           (1'b0),                                                     //         (terminated)
		.phystatus2           (1'b0),                                                     //         (terminated)
		.phystatus3           (1'b0),                                                     //         (terminated)
		.phystatus4           (1'b0),                                                     //         (terminated)
		.phystatus5           (1'b0),                                                     //         (terminated)
		.phystatus6           (1'b0),                                                     //         (terminated)
		.phystatus7           (1'b0),                                                     //         (terminated)
		.rxdata1              (8'b00000000),                                              //         (terminated)
		.rxdata2              (8'b00000000),                                              //         (terminated)
		.rxdata3              (8'b00000000),                                              //         (terminated)
		.rxdata4              (8'b00000000),                                              //         (terminated)
		.rxdata5              (8'b00000000),                                              //         (terminated)
		.rxdata6              (8'b00000000),                                              //         (terminated)
		.rxdata7              (8'b00000000),                                              //         (terminated)
		.rxdatak1             (1'b0),                                                     //         (terminated)
		.rxdatak2             (1'b0),                                                     //         (terminated)
		.rxdatak3             (1'b0),                                                     //         (terminated)
		.rxdatak4             (1'b0),                                                     //         (terminated)
		.rxdatak5             (1'b0),                                                     //         (terminated)
		.rxdatak6             (1'b0),                                                     //         (terminated)
		.rxdatak7             (1'b0),                                                     //         (terminated)
		.rxelecidle1          (1'b0),                                                     //         (terminated)
		.rxelecidle2          (1'b0),                                                     //         (terminated)
		.rxelecidle3          (1'b0),                                                     //         (terminated)
		.rxelecidle4          (1'b0),                                                     //         (terminated)
		.rxelecidle5          (1'b0),                                                     //         (terminated)
		.rxelecidle6          (1'b0),                                                     //         (terminated)
		.rxelecidle7          (1'b0),                                                     //         (terminated)
		.rxstatus1            (3'b000),                                                   //         (terminated)
		.rxstatus2            (3'b000),                                                   //         (terminated)
		.rxstatus3            (3'b000),                                                   //         (terminated)
		.rxstatus4            (3'b000),                                                   //         (terminated)
		.rxstatus5            (3'b000),                                                   //         (terminated)
		.rxstatus6            (3'b000),                                                   //         (terminated)
		.rxstatus7            (3'b000),                                                   //         (terminated)
		.rxvalid1             (1'b0),                                                     //         (terminated)
		.rxvalid2             (1'b0),                                                     //         (terminated)
		.rxvalid3             (1'b0),                                                     //         (terminated)
		.rxvalid4             (1'b0),                                                     //         (terminated)
		.rxvalid5             (1'b0),                                                     //         (terminated)
		.rxvalid6             (1'b0),                                                     //         (terminated)
		.rxvalid7             (1'b0),                                                     //         (terminated)
		.rxdataskip0          (1'b0),                                                     //         (terminated)
		.rxdataskip1          (1'b0),                                                     //         (terminated)
		.rxdataskip2          (1'b0),                                                     //         (terminated)
		.rxdataskip3          (1'b0),                                                     //         (terminated)
		.rxdataskip4          (1'b0),                                                     //         (terminated)
		.rxdataskip5          (1'b0),                                                     //         (terminated)
		.rxdataskip6          (1'b0),                                                     //         (terminated)
		.rxdataskip7          (1'b0),                                                     //         (terminated)
		.rxblkst0             (1'b0),                                                     //         (terminated)
		.rxblkst1             (1'b0),                                                     //         (terminated)
		.rxblkst2             (1'b0),                                                     //         (terminated)
		.rxblkst3             (1'b0),                                                     //         (terminated)
		.rxblkst4             (1'b0),                                                     //         (terminated)
		.rxblkst5             (1'b0),                                                     //         (terminated)
		.rxblkst6             (1'b0),                                                     //         (terminated)
		.rxblkst7             (1'b0),                                                     //         (terminated)
		.rxsynchd0            (2'b00),                                                    //         (terminated)
		.rxsynchd1            (2'b00),                                                    //         (terminated)
		.rxsynchd2            (2'b00),                                                    //         (terminated)
		.rxsynchd3            (2'b00),                                                    //         (terminated)
		.rxsynchd4            (2'b00),                                                    //         (terminated)
		.rxsynchd5            (2'b00),                                                    //         (terminated)
		.rxsynchd6            (2'b00),                                                    //         (terminated)
		.rxsynchd7            (2'b00),                                                    //         (terminated)
		.rxfreqlocked0        (1'b0),                                                     //         (terminated)
		.rxfreqlocked1        (1'b0),                                                     //         (terminated)
		.rxfreqlocked2        (1'b0),                                                     //         (terminated)
		.rxfreqlocked3        (1'b0),                                                     //         (terminated)
		.rxfreqlocked4        (1'b0),                                                     //         (terminated)
		.rxfreqlocked5        (1'b0),                                                     //         (terminated)
		.rxfreqlocked6        (1'b0),                                                     //         (terminated)
		.rxfreqlocked7        (1'b0),                                                     //         (terminated)
		.currentcoeff0        (),                                                         //         (terminated)
		.currentcoeff1        (),                                                         //         (terminated)
		.currentcoeff2        (),                                                         //         (terminated)
		.currentcoeff3        (),                                                         //         (terminated)
		.currentcoeff4        (),                                                         //         (terminated)
		.currentcoeff5        (),                                                         //         (terminated)
		.currentcoeff6        (),                                                         //         (terminated)
		.currentcoeff7        (),                                                         //         (terminated)
		.currentrxpreset0     (),                                                         //         (terminated)
		.currentrxpreset1     (),                                                         //         (terminated)
		.currentrxpreset2     (),                                                         //         (terminated)
		.currentrxpreset3     (),                                                         //         (terminated)
		.currentrxpreset4     (),                                                         //         (terminated)
		.currentrxpreset5     (),                                                         //         (terminated)
		.currentrxpreset6     (),                                                         //         (terminated)
		.currentrxpreset7     (),                                                         //         (terminated)
		.txsynchd0            (),                                                         //         (terminated)
		.txsynchd1            (),                                                         //         (terminated)
		.txsynchd2            (),                                                         //         (terminated)
		.txsynchd3            (),                                                         //         (terminated)
		.txsynchd4            (),                                                         //         (terminated)
		.txsynchd5            (),                                                         //         (terminated)
		.txsynchd6            (),                                                         //         (terminated)
		.txsynchd7            (),                                                         //         (terminated)
		.txblkst0             (),                                                         //         (terminated)
		.txblkst1             (),                                                         //         (terminated)
		.txblkst2             (),                                                         //         (terminated)
		.txblkst3             (),                                                         //         (terminated)
		.txblkst4             (),                                                         //         (terminated)
		.txblkst5             (),                                                         //         (terminated)
		.txblkst6             (),                                                         //         (terminated)
		.txblkst7             ()                                                          //         (terminated)
	);

	pcie_avmm_mm_interconnect_0 mm_interconnect_0 (
		.clk_0_clk_clk                                                            (clk_clk),                                                       //                                                          clk_0_clk.clk
		.pcie_cv_hip_avmm_0_coreclkout_clk                                        (coreclkout_clk),                                                //                                      pcie_cv_hip_avmm_0_coreclkout.clk
		.mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset_reset          (~reset_reset_n),                                                //          mm_clock_crossing_bridge_0_s0_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                // pcie_cv_hip_avmm_0_Rxm_BAR0_translator_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR0_address                                      (pcie_cv_hip_avmm_0_rxm_bar0_address),                           //                                        pcie_cv_hip_avmm_0_Rxm_BAR0.address
		.pcie_cv_hip_avmm_0_Rxm_BAR0_waitrequest                                  (pcie_cv_hip_avmm_0_rxm_bar0_waitrequest),                       //                                                                   .waitrequest
		.pcie_cv_hip_avmm_0_Rxm_BAR0_burstcount                                   (pcie_cv_hip_avmm_0_rxm_bar0_burstcount),                        //                                                                   .burstcount
		.pcie_cv_hip_avmm_0_Rxm_BAR0_byteenable                                   (pcie_cv_hip_avmm_0_rxm_bar0_byteenable),                        //                                                                   .byteenable
		.pcie_cv_hip_avmm_0_Rxm_BAR0_read                                         (pcie_cv_hip_avmm_0_rxm_bar0_read),                              //                                                                   .read
		.pcie_cv_hip_avmm_0_Rxm_BAR0_readdata                                     (pcie_cv_hip_avmm_0_rxm_bar0_readdata),                          //                                                                   .readdata
		.pcie_cv_hip_avmm_0_Rxm_BAR0_readdatavalid                                (pcie_cv_hip_avmm_0_rxm_bar0_readdatavalid),                     //                                                                   .readdatavalid
		.pcie_cv_hip_avmm_0_Rxm_BAR0_write                                        (pcie_cv_hip_avmm_0_rxm_bar0_write),                             //                                                                   .write
		.pcie_cv_hip_avmm_0_Rxm_BAR0_writedata                                    (pcie_cv_hip_avmm_0_rxm_bar0_writedata),                         //                                                                   .writedata
		.mm_clock_crossing_bridge_0_s0_address                                    (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_address),       //                                      mm_clock_crossing_bridge_0_s0.address
		.mm_clock_crossing_bridge_0_s0_write                                      (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_write),         //                                                                   .write
		.mm_clock_crossing_bridge_0_s0_read                                       (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_read),          //                                                                   .read
		.mm_clock_crossing_bridge_0_s0_readdata                                   (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdata),      //                                                                   .readdata
		.mm_clock_crossing_bridge_0_s0_writedata                                  (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_writedata),     //                                                                   .writedata
		.mm_clock_crossing_bridge_0_s0_burstcount                                 (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_burstcount),    //                                                                   .burstcount
		.mm_clock_crossing_bridge_0_s0_byteenable                                 (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_byteenable),    //                                                                   .byteenable
		.mm_clock_crossing_bridge_0_s0_readdatavalid                              (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_readdatavalid), //                                                                   .readdatavalid
		.mm_clock_crossing_bridge_0_s0_waitrequest                                (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_waitrequest),   //                                                                   .waitrequest
		.mm_clock_crossing_bridge_0_s0_debugaccess                                (mm_interconnect_0_mm_clock_crossing_bridge_0_s0_debugaccess)    //                                                                   .debugaccess
	);

	pcie_avmm_mm_interconnect_1 mm_interconnect_1 (
		.clk_0_clk_clk                                                            (clk_clk),                                                       //                                                          clk_0_clk.clk
		.pcie_cv_hip_avmm_0_coreclkout_clk                                        (coreclkout_clk),                                                //                                      pcie_cv_hip_avmm_0_coreclkout.clk
		.mm_clock_crossing_bridge_1_s0_reset_reset_bridge_in_reset_reset          (~reset_reset_n),                                                //          mm_clock_crossing_bridge_1_s0_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR1_translator_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                // pcie_cv_hip_avmm_0_Rxm_BAR1_translator_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR1_address                                      (pcie_cv_hip_avmm_0_rxm_bar1_address),                           //                                        pcie_cv_hip_avmm_0_Rxm_BAR1.address
		.pcie_cv_hip_avmm_0_Rxm_BAR1_waitrequest                                  (pcie_cv_hip_avmm_0_rxm_bar1_waitrequest),                       //                                                                   .waitrequest
		.pcie_cv_hip_avmm_0_Rxm_BAR1_burstcount                                   (pcie_cv_hip_avmm_0_rxm_bar1_burstcount),                        //                                                                   .burstcount
		.pcie_cv_hip_avmm_0_Rxm_BAR1_byteenable                                   (pcie_cv_hip_avmm_0_rxm_bar1_byteenable),                        //                                                                   .byteenable
		.pcie_cv_hip_avmm_0_Rxm_BAR1_read                                         (pcie_cv_hip_avmm_0_rxm_bar1_read),                              //                                                                   .read
		.pcie_cv_hip_avmm_0_Rxm_BAR1_readdata                                     (pcie_cv_hip_avmm_0_rxm_bar1_readdata),                          //                                                                   .readdata
		.pcie_cv_hip_avmm_0_Rxm_BAR1_readdatavalid                                (pcie_cv_hip_avmm_0_rxm_bar1_readdatavalid),                     //                                                                   .readdatavalid
		.pcie_cv_hip_avmm_0_Rxm_BAR1_write                                        (pcie_cv_hip_avmm_0_rxm_bar1_write),                             //                                                                   .write
		.pcie_cv_hip_avmm_0_Rxm_BAR1_writedata                                    (pcie_cv_hip_avmm_0_rxm_bar1_writedata),                         //                                                                   .writedata
		.mm_clock_crossing_bridge_1_s0_address                                    (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_address),       //                                      mm_clock_crossing_bridge_1_s0.address
		.mm_clock_crossing_bridge_1_s0_write                                      (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_write),         //                                                                   .write
		.mm_clock_crossing_bridge_1_s0_read                                       (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_read),          //                                                                   .read
		.mm_clock_crossing_bridge_1_s0_readdata                                   (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdata),      //                                                                   .readdata
		.mm_clock_crossing_bridge_1_s0_writedata                                  (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_writedata),     //                                                                   .writedata
		.mm_clock_crossing_bridge_1_s0_burstcount                                 (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_burstcount),    //                                                                   .burstcount
		.mm_clock_crossing_bridge_1_s0_byteenable                                 (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_byteenable),    //                                                                   .byteenable
		.mm_clock_crossing_bridge_1_s0_readdatavalid                              (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_readdatavalid), //                                                                   .readdatavalid
		.mm_clock_crossing_bridge_1_s0_waitrequest                                (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_waitrequest),   //                                                                   .waitrequest
		.mm_clock_crossing_bridge_1_s0_debugaccess                                (mm_interconnect_1_mm_clock_crossing_bridge_1_s0_debugaccess)    //                                                                   .debugaccess
	);

	pcie_avmm_mm_interconnect_2 mm_interconnect_2 (
		.clk_0_clk_clk                                                            (clk_clk),                                                       //                                                          clk_0_clk.clk
		.pcie_cv_hip_avmm_0_coreclkout_clk                                        (coreclkout_clk),                                                //                                      pcie_cv_hip_avmm_0_coreclkout.clk
		.mm_clock_crossing_bridge_2_s0_reset_reset_bridge_in_reset_reset          (~reset_reset_n),                                                //          mm_clock_crossing_bridge_2_s0_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR2_translator_reset_reset_bridge_in_reset_reset (rst_controller_reset_out_reset),                                // pcie_cv_hip_avmm_0_Rxm_BAR2_translator_reset_reset_bridge_in_reset.reset
		.pcie_cv_hip_avmm_0_Rxm_BAR2_address                                      (pcie_cv_hip_avmm_0_rxm_bar2_address),                           //                                        pcie_cv_hip_avmm_0_Rxm_BAR2.address
		.pcie_cv_hip_avmm_0_Rxm_BAR2_waitrequest                                  (pcie_cv_hip_avmm_0_rxm_bar2_waitrequest),                       //                                                                   .waitrequest
		.pcie_cv_hip_avmm_0_Rxm_BAR2_burstcount                                   (pcie_cv_hip_avmm_0_rxm_bar2_burstcount),                        //                                                                   .burstcount
		.pcie_cv_hip_avmm_0_Rxm_BAR2_byteenable                                   (pcie_cv_hip_avmm_0_rxm_bar2_byteenable),                        //                                                                   .byteenable
		.pcie_cv_hip_avmm_0_Rxm_BAR2_read                                         (pcie_cv_hip_avmm_0_rxm_bar2_read),                              //                                                                   .read
		.pcie_cv_hip_avmm_0_Rxm_BAR2_readdata                                     (pcie_cv_hip_avmm_0_rxm_bar2_readdata),                          //                                                                   .readdata
		.pcie_cv_hip_avmm_0_Rxm_BAR2_readdatavalid                                (pcie_cv_hip_avmm_0_rxm_bar2_readdatavalid),                     //                                                                   .readdatavalid
		.pcie_cv_hip_avmm_0_Rxm_BAR2_write                                        (pcie_cv_hip_avmm_0_rxm_bar2_write),                             //                                                                   .write
		.pcie_cv_hip_avmm_0_Rxm_BAR2_writedata                                    (pcie_cv_hip_avmm_0_rxm_bar2_writedata),                         //                                                                   .writedata
		.mm_clock_crossing_bridge_2_s0_address                                    (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_address),       //                                      mm_clock_crossing_bridge_2_s0.address
		.mm_clock_crossing_bridge_2_s0_write                                      (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_write),         //                                                                   .write
		.mm_clock_crossing_bridge_2_s0_read                                       (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_read),          //                                                                   .read
		.mm_clock_crossing_bridge_2_s0_readdata                                   (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdata),      //                                                                   .readdata
		.mm_clock_crossing_bridge_2_s0_writedata                                  (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_writedata),     //                                                                   .writedata
		.mm_clock_crossing_bridge_2_s0_burstcount                                 (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_burstcount),    //                                                                   .burstcount
		.mm_clock_crossing_bridge_2_s0_byteenable                                 (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_byteenable),    //                                                                   .byteenable
		.mm_clock_crossing_bridge_2_s0_readdatavalid                              (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_readdatavalid), //                                                                   .readdatavalid
		.mm_clock_crossing_bridge_2_s0_waitrequest                                (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_waitrequest),   //                                                                   .waitrequest
		.mm_clock_crossing_bridge_2_s0_debugaccess                                (mm_interconnect_2_mm_clock_crossing_bridge_2_s0_debugaccess)    //                                                                   .debugaccess
	);

	altera_reset_controller #(
		.NUM_RESET_INPUTS          (1),
		.OUTPUT_RESET_SYNC_EDGES   ("deassert"),
		.SYNC_DEPTH                (2),
		.RESET_REQUEST_PRESENT     (0),
		.RESET_REQ_WAIT_TIME       (1),
		.MIN_RST_ASSERTION_TIME    (3),
		.RESET_REQ_EARLY_DSRT_TIME (1),
		.USE_RESET_REQUEST_IN0     (0),
		.USE_RESET_REQUEST_IN1     (0),
		.USE_RESET_REQUEST_IN2     (0),
		.USE_RESET_REQUEST_IN3     (0),
		.USE_RESET_REQUEST_IN4     (0),
		.USE_RESET_REQUEST_IN5     (0),
		.USE_RESET_REQUEST_IN6     (0),
		.USE_RESET_REQUEST_IN7     (0),
		.USE_RESET_REQUEST_IN8     (0),
		.USE_RESET_REQUEST_IN9     (0),
		.USE_RESET_REQUEST_IN10    (0),
		.USE_RESET_REQUEST_IN11    (0),
		.USE_RESET_REQUEST_IN12    (0),
		.USE_RESET_REQUEST_IN13    (0),
		.USE_RESET_REQUEST_IN14    (0),
		.USE_RESET_REQUEST_IN15    (0),
		.ADAPT_RESET_REQUEST       (0)
	) rst_controller (
		.reset_in0      (~nreset_status_reset_n),         // reset_in0.reset
		.clk            (coreclkout_clk),                 //       clk.clk
		.reset_out      (rst_controller_reset_out_reset), // reset_out.reset
		.reset_req      (),                               // (terminated)
		.reset_req_in0  (1'b0),                           // (terminated)
		.reset_in1      (1'b0),                           // (terminated)
		.reset_req_in1  (1'b0),                           // (terminated)
		.reset_in2      (1'b0),                           // (terminated)
		.reset_req_in2  (1'b0),                           // (terminated)
		.reset_in3      (1'b0),                           // (terminated)
		.reset_req_in3  (1'b0),                           // (terminated)
		.reset_in4      (1'b0),                           // (terminated)
		.reset_req_in4  (1'b0),                           // (terminated)
		.reset_in5      (1'b0),                           // (terminated)
		.reset_req_in5  (1'b0),                           // (terminated)
		.reset_in6      (1'b0),                           // (terminated)
		.reset_req_in6  (1'b0),                           // (terminated)
		.reset_in7      (1'b0),                           // (terminated)
		.reset_req_in7  (1'b0),                           // (terminated)
		.reset_in8      (1'b0),                           // (terminated)
		.reset_req_in8  (1'b0),                           // (terminated)
		.reset_in9      (1'b0),                           // (terminated)
		.reset_req_in9  (1'b0),                           // (terminated)
		.reset_in10     (1'b0),                           // (terminated)
		.reset_req_in10 (1'b0),                           // (terminated)
		.reset_in11     (1'b0),                           // (terminated)
		.reset_req_in11 (1'b0),                           // (terminated)
		.reset_in12     (1'b0),                           // (terminated)
		.reset_req_in12 (1'b0),                           // (terminated)
		.reset_in13     (1'b0),                           // (terminated)
		.reset_req_in13 (1'b0),                           // (terminated)
		.reset_in14     (1'b0),                           // (terminated)
		.reset_req_in14 (1'b0),                           // (terminated)
		.reset_in15     (1'b0),                           // (terminated)
		.reset_req_in15 (1'b0)                            // (terminated)
	);

endmodule
