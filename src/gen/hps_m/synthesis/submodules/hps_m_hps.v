// hps_m_hps.v

// This file was auto-generated from altera_hps_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module hps_m_hps #(
		parameter F2S_Width = 0,
		parameter S2F_Width = 0
	) (
		output wire        h2f_rst_n,                //        h2f_reset.reset_n
		input  wire [28:0] f2h_sdram0_ADDRESS,       //  f2h_sdram0_data.address
		input  wire [7:0]  f2h_sdram0_BURSTCOUNT,    //                 .burstcount
		output wire        f2h_sdram0_WAITREQUEST,   //                 .waitrequest
		output wire [63:0] f2h_sdram0_READDATA,      //                 .readdata
		output wire        f2h_sdram0_READDATAVALID, //                 .readdatavalid
		input  wire        f2h_sdram0_READ,          //                 .read
		input  wire [63:0] f2h_sdram0_WRITEDATA,     //                 .writedata
		input  wire [7:0]  f2h_sdram0_BYTEENABLE,    //                 .byteenable
		input  wire        f2h_sdram0_WRITE,         //                 .write
		input  wire        f2h_sdram0_clk,           // f2h_sdram0_clock.clk
		input  wire [28:0] f2h_sdram1_ADDRESS,       //  f2h_sdram1_data.address
		input  wire [7:0]  f2h_sdram1_BURSTCOUNT,    //                 .burstcount
		output wire        f2h_sdram1_WAITREQUEST,   //                 .waitrequest
		output wire [63:0] f2h_sdram1_READDATA,      //                 .readdata
		output wire        f2h_sdram1_READDATAVALID, //                 .readdatavalid
		input  wire        f2h_sdram1_READ,          //                 .read
		input  wire [63:0] f2h_sdram1_WRITEDATA,     //                 .writedata
		input  wire [7:0]  f2h_sdram1_BYTEENABLE,    //                 .byteenable
		input  wire        f2h_sdram1_WRITE,         //                 .write
		input  wire        f2h_sdram1_clk,           // f2h_sdram1_clock.clk
		output wire [15:0] mem_a,                    //           memory.mem_a
		output wire [2:0]  mem_ba,                   //                 .mem_ba
		output wire        mem_ck,                   //                 .mem_ck
		output wire        mem_ck_n,                 //                 .mem_ck_n
		output wire        mem_cke,                  //                 .mem_cke
		output wire        mem_cs_n,                 //                 .mem_cs_n
		output wire        mem_ras_n,                //                 .mem_ras_n
		output wire        mem_cas_n,                //                 .mem_cas_n
		output wire        mem_we_n,                 //                 .mem_we_n
		output wire        mem_reset_n,              //                 .mem_reset_n
		inout  wire [31:0] mem_dq,                   //                 .mem_dq
		inout  wire [3:0]  mem_dqs,                  //                 .mem_dqs
		inout  wire [3:0]  mem_dqs_n,                //                 .mem_dqs_n
		output wire        mem_odt,                  //                 .mem_odt
		output wire [3:0]  mem_dm,                   //                 .mem_dm
		input  wire        oct_rzqin,                //                 .oct_rzqin
		output wire        hps_io_emac1_inst_TX_CLK, //           hps_io.hps_io_emac1_inst_TX_CLK
		output wire        hps_io_emac1_inst_TXD0,   //                 .hps_io_emac1_inst_TXD0
		output wire        hps_io_emac1_inst_TXD1,   //                 .hps_io_emac1_inst_TXD1
		output wire        hps_io_emac1_inst_TXD2,   //                 .hps_io_emac1_inst_TXD2
		output wire        hps_io_emac1_inst_TXD3,   //                 .hps_io_emac1_inst_TXD3
		input  wire        hps_io_emac1_inst_RXD0,   //                 .hps_io_emac1_inst_RXD0
		inout  wire        hps_io_emac1_inst_MDIO,   //                 .hps_io_emac1_inst_MDIO
		output wire        hps_io_emac1_inst_MDC,    //                 .hps_io_emac1_inst_MDC
		input  wire        hps_io_emac1_inst_RX_CTL, //                 .hps_io_emac1_inst_RX_CTL
		output wire        hps_io_emac1_inst_TX_CTL, //                 .hps_io_emac1_inst_TX_CTL
		input  wire        hps_io_emac1_inst_RX_CLK, //                 .hps_io_emac1_inst_RX_CLK
		input  wire        hps_io_emac1_inst_RXD1,   //                 .hps_io_emac1_inst_RXD1
		input  wire        hps_io_emac1_inst_RXD2,   //                 .hps_io_emac1_inst_RXD2
		input  wire        hps_io_emac1_inst_RXD3,   //                 .hps_io_emac1_inst_RXD3
		inout  wire        hps_io_qspi_inst_IO0,     //                 .hps_io_qspi_inst_IO0
		inout  wire        hps_io_qspi_inst_IO1,     //                 .hps_io_qspi_inst_IO1
		inout  wire        hps_io_qspi_inst_IO2,     //                 .hps_io_qspi_inst_IO2
		inout  wire        hps_io_qspi_inst_IO3,     //                 .hps_io_qspi_inst_IO3
		output wire        hps_io_qspi_inst_SS0,     //                 .hps_io_qspi_inst_SS0
		output wire        hps_io_qspi_inst_CLK,     //                 .hps_io_qspi_inst_CLK
		input  wire        hps_io_uart0_inst_RX,     //                 .hps_io_uart0_inst_RX
		output wire        hps_io_uart0_inst_TX,     //                 .hps_io_uart0_inst_TX
		inout  wire        hps_io_gpio_inst_GPIO44   //                 .hps_io_gpio_inst_GPIO44
	);

	generate
		// If any of the display statements (or deliberately broken
		// instantiations) within this generate block triggers then this module
		// has been instantiated this module with a set of parameters different
		// from those it was generated for.  This will usually result in a
		// non-functioning system.
		if (F2S_Width != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					f2s_width_check ( .error(1'b1) );
		end
		if (S2F_Width != 0)
		begin
			initial begin
				$display("Generated module instantiated with wrong parameters");
				$stop;
			end
			instantiated_with_wrong_parameters_error_see_comment_above
					s2f_width_check ( .error(1'b1) );
		end
	endgenerate

	hps_m_hps_fpga_interfaces fpga_interfaces (
		.h2f_rst_n                (h2f_rst_n),                //        h2f_reset.reset_n
		.f2h_sdram0_ADDRESS       (f2h_sdram0_ADDRESS),       //  f2h_sdram0_data.address
		.f2h_sdram0_BURSTCOUNT    (f2h_sdram0_BURSTCOUNT),    //                 .burstcount
		.f2h_sdram0_WAITREQUEST   (f2h_sdram0_WAITREQUEST),   //                 .waitrequest
		.f2h_sdram0_READDATA      (f2h_sdram0_READDATA),      //                 .readdata
		.f2h_sdram0_READDATAVALID (f2h_sdram0_READDATAVALID), //                 .readdatavalid
		.f2h_sdram0_READ          (f2h_sdram0_READ),          //                 .read
		.f2h_sdram0_WRITEDATA     (f2h_sdram0_WRITEDATA),     //                 .writedata
		.f2h_sdram0_BYTEENABLE    (f2h_sdram0_BYTEENABLE),    //                 .byteenable
		.f2h_sdram0_WRITE         (f2h_sdram0_WRITE),         //                 .write
		.f2h_sdram0_clk           (f2h_sdram0_clk),           // f2h_sdram0_clock.clk
		.f2h_sdram1_ADDRESS       (f2h_sdram1_ADDRESS),       //  f2h_sdram1_data.address
		.f2h_sdram1_BURSTCOUNT    (f2h_sdram1_BURSTCOUNT),    //                 .burstcount
		.f2h_sdram1_WAITREQUEST   (f2h_sdram1_WAITREQUEST),   //                 .waitrequest
		.f2h_sdram1_READDATA      (f2h_sdram1_READDATA),      //                 .readdata
		.f2h_sdram1_READDATAVALID (f2h_sdram1_READDATAVALID), //                 .readdatavalid
		.f2h_sdram1_READ          (f2h_sdram1_READ),          //                 .read
		.f2h_sdram1_WRITEDATA     (f2h_sdram1_WRITEDATA),     //                 .writedata
		.f2h_sdram1_BYTEENABLE    (f2h_sdram1_BYTEENABLE),    //                 .byteenable
		.f2h_sdram1_WRITE         (f2h_sdram1_WRITE),         //                 .write
		.f2h_sdram1_clk           (f2h_sdram1_clk)            // f2h_sdram1_clock.clk
	);

	hps_m_hps_hps_io hps_io (
		.mem_a                    (mem_a),                    // memory.mem_a
		.mem_ba                   (mem_ba),                   //       .mem_ba
		.mem_ck                   (mem_ck),                   //       .mem_ck
		.mem_ck_n                 (mem_ck_n),                 //       .mem_ck_n
		.mem_cke                  (mem_cke),                  //       .mem_cke
		.mem_cs_n                 (mem_cs_n),                 //       .mem_cs_n
		.mem_ras_n                (mem_ras_n),                //       .mem_ras_n
		.mem_cas_n                (mem_cas_n),                //       .mem_cas_n
		.mem_we_n                 (mem_we_n),                 //       .mem_we_n
		.mem_reset_n              (mem_reset_n),              //       .mem_reset_n
		.mem_dq                   (mem_dq),                   //       .mem_dq
		.mem_dqs                  (mem_dqs),                  //       .mem_dqs
		.mem_dqs_n                (mem_dqs_n),                //       .mem_dqs_n
		.mem_odt                  (mem_odt),                  //       .mem_odt
		.mem_dm                   (mem_dm),                   //       .mem_dm
		.oct_rzqin                (oct_rzqin),                //       .oct_rzqin
		.hps_io_emac1_inst_TX_CLK (hps_io_emac1_inst_TX_CLK), // hps_io.hps_io_emac1_inst_TX_CLK
		.hps_io_emac1_inst_TXD0   (hps_io_emac1_inst_TXD0),   //       .hps_io_emac1_inst_TXD0
		.hps_io_emac1_inst_TXD1   (hps_io_emac1_inst_TXD1),   //       .hps_io_emac1_inst_TXD1
		.hps_io_emac1_inst_TXD2   (hps_io_emac1_inst_TXD2),   //       .hps_io_emac1_inst_TXD2
		.hps_io_emac1_inst_TXD3   (hps_io_emac1_inst_TXD3),   //       .hps_io_emac1_inst_TXD3
		.hps_io_emac1_inst_RXD0   (hps_io_emac1_inst_RXD0),   //       .hps_io_emac1_inst_RXD0
		.hps_io_emac1_inst_MDIO   (hps_io_emac1_inst_MDIO),   //       .hps_io_emac1_inst_MDIO
		.hps_io_emac1_inst_MDC    (hps_io_emac1_inst_MDC),    //       .hps_io_emac1_inst_MDC
		.hps_io_emac1_inst_RX_CTL (hps_io_emac1_inst_RX_CTL), //       .hps_io_emac1_inst_RX_CTL
		.hps_io_emac1_inst_TX_CTL (hps_io_emac1_inst_TX_CTL), //       .hps_io_emac1_inst_TX_CTL
		.hps_io_emac1_inst_RX_CLK (hps_io_emac1_inst_RX_CLK), //       .hps_io_emac1_inst_RX_CLK
		.hps_io_emac1_inst_RXD1   (hps_io_emac1_inst_RXD1),   //       .hps_io_emac1_inst_RXD1
		.hps_io_emac1_inst_RXD2   (hps_io_emac1_inst_RXD2),   //       .hps_io_emac1_inst_RXD2
		.hps_io_emac1_inst_RXD3   (hps_io_emac1_inst_RXD3),   //       .hps_io_emac1_inst_RXD3
		.hps_io_qspi_inst_IO0     (hps_io_qspi_inst_IO0),     //       .hps_io_qspi_inst_IO0
		.hps_io_qspi_inst_IO1     (hps_io_qspi_inst_IO1),     //       .hps_io_qspi_inst_IO1
		.hps_io_qspi_inst_IO2     (hps_io_qspi_inst_IO2),     //       .hps_io_qspi_inst_IO2
		.hps_io_qspi_inst_IO3     (hps_io_qspi_inst_IO3),     //       .hps_io_qspi_inst_IO3
		.hps_io_qspi_inst_SS0     (hps_io_qspi_inst_SS0),     //       .hps_io_qspi_inst_SS0
		.hps_io_qspi_inst_CLK     (hps_io_qspi_inst_CLK),     //       .hps_io_qspi_inst_CLK
		.hps_io_uart0_inst_RX     (hps_io_uart0_inst_RX),     //       .hps_io_uart0_inst_RX
		.hps_io_uart0_inst_TX     (hps_io_uart0_inst_TX),     //       .hps_io_uart0_inst_TX
		.hps_io_gpio_inst_GPIO44  (hps_io_gpio_inst_GPIO44)   //       .hps_io_gpio_inst_GPIO44
	);

endmodule
